
FOTA_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b00  08000b00  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b00  08000b00  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b00  08000b00  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b00  08000b00  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b00  08000b00  00010b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b04  08000b04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000004  08000b0c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000b0c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014fc  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009c4  00000000  00000000  0002156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c8  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001f9  00000000  00000000  000221f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b49  00000000  00000000  000223f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fce  00000000  00000000  00023f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c9e  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000960  00000000  00000000  0002fba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00030508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ae8 	.word	0x08000ae8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000ae8 	.word	0x08000ae8

08000170 <EXTI0_IRQHandler>:
void EXTI0_VidSetCallBack( void (*ptr) (void) ){

	EXTI0_CallBack = ptr;

}
void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	EXTI0_CallBack();
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
	SET_BIT( EXTI->PR , 0 );
 800017a:	4b05      	ldr	r3, [pc, #20]	; (8000190 <EXTI0_IRQHandler+0x20>)
 800017c:	695b      	ldr	r3, [r3, #20]
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000180:	f043 0301 	orr.w	r3, r3, #1
 8000184:	6153      	str	r3, [r2, #20]

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	20000020 	.word	0x20000020
 8000190:	40010400 	.word	0x40010400

08000194 <MGPIO_VidSetPinDirection>:

#include"GPIO_INTERFACE.h"
#include"GPIO_REG.h"


void MGPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
 800019e:	460b      	mov	r3, r1
 80001a0:	71bb      	strb	r3, [r7, #6]
 80001a2:	4613      	mov	r3, r2
 80001a4:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b02      	cmp	r3, #2
 80001aa:	d07a      	beq.n	80002a2 <MGPIO_VidSetPinDirection+0x10e>
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	f300 80b1 	bgt.w	8000314 <MGPIO_VidSetPinDirection+0x180>
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d002      	beq.n	80001bc <MGPIO_VidSetPinDirection+0x28>
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d03a      	beq.n	8000230 <MGPIO_VidSetPinDirection+0x9c>
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
		}

		break;
	default :break;
 80001ba:	e0ab      	b.n	8000314 <MGPIO_VidSetPinDirection+0x180>
		if(Copy_u8Pin <= 7 ){//low
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d817      	bhi.n	80001f2 <MGPIO_VidSetPinDirection+0x5e>
			MGPIOA->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));// R M W
 80001c2:	4b5a      	ldr	r3, [pc, #360]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	79ba      	ldrb	r2, [r7, #6]
 80001c8:	0092      	lsls	r2, r2, #2
 80001ca:	210f      	movs	r1, #15
 80001cc:	fa01 f202 	lsl.w	r2, r1, r2
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	4611      	mov	r1, r2
 80001d4:	4a55      	ldr	r2, [pc, #340]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 80001d6:	400b      	ands	r3, r1
 80001d8:	6013      	str	r3, [r2, #0]
			MGPIOA->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 80001da:	4b54      	ldr	r3, [pc, #336]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	7979      	ldrb	r1, [r7, #5]
 80001e0:	79ba      	ldrb	r2, [r7, #6]
 80001e2:	0092      	lsls	r2, r2, #2
 80001e4:	fa01 f202 	lsl.w	r2, r1, r2
 80001e8:	4611      	mov	r1, r2
 80001ea:	4a50      	ldr	r2, [pc, #320]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 80001ec:	430b      	orrs	r3, r1
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e092      	b.n	8000318 <MGPIO_VidSetPinDirection+0x184>
		}else if(Copy_u8Pin <=15 ){//high
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	2b0f      	cmp	r3, #15
 80001f6:	f200 808f 	bhi.w	8000318 <MGPIO_VidSetPinDirection+0x184>
			Copy_u8Pin = Copy_u8Pin - 8;
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	3b08      	subs	r3, #8
 80001fe:	71bb      	strb	r3, [r7, #6]
			MGPIOA->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000200:	4b4a      	ldr	r3, [pc, #296]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	79ba      	ldrb	r2, [r7, #6]
 8000206:	0092      	lsls	r2, r2, #2
 8000208:	210f      	movs	r1, #15
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	43d2      	mvns	r2, r2
 8000210:	4611      	mov	r1, r2
 8000212:	4a46      	ldr	r2, [pc, #280]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 8000214:	400b      	ands	r3, r1
 8000216:	6053      	str	r3, [r2, #4]
			MGPIOA->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000218:	4b44      	ldr	r3, [pc, #272]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	7979      	ldrb	r1, [r7, #5]
 800021e:	79ba      	ldrb	r2, [r7, #6]
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a40      	ldr	r2, [pc, #256]	; (800032c <MGPIO_VidSetPinDirection+0x198>)
 800022a:	430b      	orrs	r3, r1
 800022c:	6053      	str	r3, [r2, #4]
		break;
 800022e:	e073      	b.n	8000318 <MGPIO_VidSetPinDirection+0x184>
		if(Copy_u8Pin <= 7 ){//low
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	2b07      	cmp	r3, #7
 8000234:	d817      	bhi.n	8000266 <MGPIO_VidSetPinDirection+0xd2>
			MGPIOB->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 8000236:	4b3e      	ldr	r3, [pc, #248]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0092      	lsls	r2, r2, #2
 800023e:	210f      	movs	r1, #15
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	43d2      	mvns	r2, r2
 8000246:	4611      	mov	r1, r2
 8000248:	4a39      	ldr	r2, [pc, #228]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 800024a:	400b      	ands	r3, r1
 800024c:	6013      	str	r3, [r2, #0]
			MGPIOB->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800024e:	4b38      	ldr	r3, [pc, #224]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	7979      	ldrb	r1, [r7, #5]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	0092      	lsls	r2, r2, #2
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	4611      	mov	r1, r2
 800025e:	4a34      	ldr	r2, [pc, #208]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 8000260:	430b      	orrs	r3, r1
 8000262:	6013      	str	r3, [r2, #0]
		break;
 8000264:	e05a      	b.n	800031c <MGPIO_VidSetPinDirection+0x188>
		}else if(Copy_u8Pin <=15 ){//high
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	2b0f      	cmp	r3, #15
 800026a:	d857      	bhi.n	800031c <MGPIO_VidSetPinDirection+0x188>
			Copy_u8Pin = Copy_u8Pin - 8;
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	3b08      	subs	r3, #8
 8000270:	71bb      	strb	r3, [r7, #6]
			MGPIOB->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 8000272:	4b2f      	ldr	r3, [pc, #188]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	79ba      	ldrb	r2, [r7, #6]
 8000278:	0092      	lsls	r2, r2, #2
 800027a:	210f      	movs	r1, #15
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a2a      	ldr	r2, [pc, #168]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 8000286:	400b      	ands	r3, r1
 8000288:	6053      	str	r3, [r2, #4]
			MGPIOB->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 800028a:	4b29      	ldr	r3, [pc, #164]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	7979      	ldrb	r1, [r7, #5]
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	0092      	lsls	r2, r2, #2
 8000294:	fa01 f202 	lsl.w	r2, r1, r2
 8000298:	4611      	mov	r1, r2
 800029a:	4a25      	ldr	r2, [pc, #148]	; (8000330 <MGPIO_VidSetPinDirection+0x19c>)
 800029c:	430b      	orrs	r3, r1
 800029e:	6053      	str	r3, [r2, #4]
		break;
 80002a0:	e03c      	b.n	800031c <MGPIO_VidSetPinDirection+0x188>
		if(Copy_u8Pin <= 7 ){//low
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	2b07      	cmp	r3, #7
 80002a6:	d817      	bhi.n	80002d8 <MGPIO_VidSetPinDirection+0x144>
			MGPIOC->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );// R M W
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	210f      	movs	r1, #15
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002bc:	400b      	ands	r3, r1
 80002be:	6013      	str	r3, [r2, #0]
			MGPIOC->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	7979      	ldrb	r1, [r7, #5]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	4611      	mov	r1, r2
 80002d0:	4a18      	ldr	r2, [pc, #96]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002d2:	430b      	orrs	r3, r1
 80002d4:	6013      	str	r3, [r2, #0]
		break;
 80002d6:	e023      	b.n	8000320 <MGPIO_VidSetPinDirection+0x18c>
		}else if(Copy_u8Pin <=15 ){//high
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d820      	bhi.n	8000320 <MGPIO_VidSetPinDirection+0x18c>
			Copy_u8Pin = Copy_u8Pin - 8;
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	3b08      	subs	r3, #8
 80002e2:	71bb      	strb	r3, [r7, #6]
			MGPIOC->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ) );
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	79ba      	ldrb	r2, [r7, #6]
 80002ea:	0092      	lsls	r2, r2, #2
 80002ec:	210f      	movs	r1, #15
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6053      	str	r3, [r2, #4]
			MGPIOC->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 )  ;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	7979      	ldrb	r1, [r7, #5]
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0092      	lsls	r2, r2, #2
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <MGPIO_VidSetPinDirection+0x1a0>)
 800030e:	430b      	orrs	r3, r1
 8000310:	6053      	str	r3, [r2, #4]
		break;
 8000312:	e005      	b.n	8000320 <MGPIO_VidSetPinDirection+0x18c>
	default :break;
 8000314:	bf00      	nop
 8000316:	e004      	b.n	8000322 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000318:	bf00      	nop
 800031a:	e002      	b.n	8000322 <MGPIO_VidSetPinDirection+0x18e>
		break;
 800031c:	bf00      	nop
 800031e:	e000      	b.n	8000322 <MGPIO_VidSetPinDirection+0x18e>
		break;
 8000320:	bf00      	nop
	}

}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40010800 	.word	0x40010800
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40011000 	.word	0x40011000

08000338 <MGPIO_VidSetPinValue>:

void MGPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	460b      	mov	r3, r1
 8000344:	71bb      	strb	r3, [r7, #6]
 8000346:	4613      	mov	r3, r2
 8000348:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8Port){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b02      	cmp	r3, #2
 800034e:	d040      	beq.n	80003d2 <MGPIO_VidSetPinValue+0x9a>
 8000350:	2b02      	cmp	r3, #2
 8000352:	dc60      	bgt.n	8000416 <MGPIO_VidSetPinValue+0xde>
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <MGPIO_VidSetPinValue+0x26>
 8000358:	2b01      	cmp	r3, #1
 800035a:	d01d      	beq.n	8000398 <MGPIO_VidSetPinValue+0x60>

		break;

	}

}
 800035c:	e05b      	b.n	8000416 <MGPIO_VidSetPinValue+0xde>
		if( u8Copy_u8Value == HIGH ){
 800035e:	797b      	ldrb	r3, [r7, #5]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d10a      	bne.n	800037a <MGPIO_VidSetPinValue+0x42>
			SET_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000364:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MGPIO_VidSetPinValue+0xe8>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	2101      	movs	r1, #1
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a2b      	ldr	r2, [pc, #172]	; (8000420 <MGPIO_VidSetPinValue+0xe8>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
		break;
 8000378:	e048      	b.n	800040c <MGPIO_VidSetPinValue+0xd4>
		}else if( u8Copy_u8Value == LOW ){
 800037a:	797b      	ldrb	r3, [r7, #5]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d145      	bne.n	800040c <MGPIO_VidSetPinValue+0xd4>
			CLR_BIT( MGPIOA->ODR , Copy_u8Pin );
 8000380:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MGPIO_VidSetPinValue+0xe8>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	79ba      	ldrb	r2, [r7, #6]
 8000386:	2101      	movs	r1, #1
 8000388:	fa01 f202 	lsl.w	r2, r1, r2
 800038c:	43d2      	mvns	r2, r2
 800038e:	4611      	mov	r1, r2
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MGPIO_VidSetPinValue+0xe8>)
 8000392:	400b      	ands	r3, r1
 8000394:	60d3      	str	r3, [r2, #12]
		break;
 8000396:	e039      	b.n	800040c <MGPIO_VidSetPinValue+0xd4>
		if( u8Copy_u8Value == HIGH ){
 8000398:	797b      	ldrb	r3, [r7, #5]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d10a      	bne.n	80003b4 <MGPIO_VidSetPinValue+0x7c>
			SET_BIT( MGPIOB->ODR , Copy_u8Pin );
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <MGPIO_VidSetPinValue+0xec>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	79ba      	ldrb	r2, [r7, #6]
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <MGPIO_VidSetPinValue+0xec>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	60d3      	str	r3, [r2, #12]
		break;
 80003b2:	e02d      	b.n	8000410 <MGPIO_VidSetPinValue+0xd8>
		}else if( u8Copy_u8Value == LOW ){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d12a      	bne.n	8000410 <MGPIO_VidSetPinValue+0xd8>
			CLR_BIT( MGPIOB->ODR , Copy_u8Pin );
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MGPIO_VidSetPinValue+0xec>)
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	79ba      	ldrb	r2, [r7, #6]
 80003c0:	2101      	movs	r1, #1
 80003c2:	fa01 f202 	lsl.w	r2, r1, r2
 80003c6:	43d2      	mvns	r2, r2
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a16      	ldr	r2, [pc, #88]	; (8000424 <MGPIO_VidSetPinValue+0xec>)
 80003cc:	400b      	ands	r3, r1
 80003ce:	60d3      	str	r3, [r2, #12]
		break;
 80003d0:	e01e      	b.n	8000410 <MGPIO_VidSetPinValue+0xd8>
		if( u8Copy_u8Value == HIGH ){
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10a      	bne.n	80003ee <MGPIO_VidSetPinValue+0xb6>
			SET_BIT( MGPIOC->ODR , Copy_u8Pin );
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MGPIO_VidSetPinValue+0xf0>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	79ba      	ldrb	r2, [r7, #6]
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MGPIO_VidSetPinValue+0xf0>)
 80003e8:	430b      	orrs	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]
		break;
 80003ec:	e012      	b.n	8000414 <MGPIO_VidSetPinValue+0xdc>
		}else if( u8Copy_u8Value == LOW ){
 80003ee:	797b      	ldrb	r3, [r7, #5]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10f      	bne.n	8000414 <MGPIO_VidSetPinValue+0xdc>
			CLR_BIT( MGPIOC->ODR , Copy_u8Pin );
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MGPIO_VidSetPinValue+0xf0>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	43d2      	mvns	r2, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a08      	ldr	r2, [pc, #32]	; (8000428 <MGPIO_VidSetPinValue+0xf0>)
 8000406:	400b      	ands	r3, r1
 8000408:	60d3      	str	r3, [r2, #12]
		break;
 800040a:	e003      	b.n	8000414 <MGPIO_VidSetPinValue+0xdc>
		break;
 800040c:	bf00      	nop
 800040e:	e002      	b.n	8000416 <MGPIO_VidSetPinValue+0xde>
		break;
 8000410:	bf00      	nop
 8000412:	e000      	b.n	8000416 <MGPIO_VidSetPinValue+0xde>
		break;
 8000414:	bf00      	nop
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40011000 	.word	0x40011000

0800042c <MNVIC_VidEnablePeripheral>:

#include"NVIC_INTERFACE.h"
#include"NVIC_REG.h"


void MNVIC_VidEnablePeripheral ( u8 Copy_u8INTID ){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]

	MNVIC->ISER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 ) ;
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	f003 031f 	and.w	r3, r3, #31
 800043c:	2201      	movs	r2, #1
 800043e:	fa02 f103 	lsl.w	r1, r2, r3
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <MNVIC_VidEnablePeripheral+0x2c>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	095b      	lsrs	r3, r3, #5
 8000448:	b2db      	uxtb	r3, r3
 800044a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	e000e100 	.word	0xe000e100

0800045c <MRCC_VidInit>:
#include"RCC_CONFG.h"
#include"ERROR_STATUS.h"
#include"RCC_PRIVATE.h"
#include"RCC_REG.h"

void MRCC_VidInit( void ){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0

	u32 LOC_u32TimeOut = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]

	#if   CLOCK_TYPE == HSI

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSI Selected As A System Clock */
		CLR_BIT( MRCC->CFGR , 0  );
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <MRCC_VidInit+0x60>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <MRCC_VidInit+0x60>)
 800046c:	f023 0301 	bic.w	r3, r3, #1
 8000470:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR , 1  );
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <MRCC_VidInit+0x60>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	4a11      	ldr	r2, [pc, #68]	; (80004bc <MRCC_VidInit+0x60>)
 8000478:	f023 0302 	bic.w	r3, r3, #2
 800047c:	6053      	str	r3, [r2, #4]
		/* Bit 0 -> Enable The HSI Clock */
		SET_BIT( MRCC->CR   , 0  );
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <MRCC_VidInit+0x60>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <MRCC_VidInit+0x60>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6013      	str	r3, [r2, #0]
		/* Bit 1 -> Checking While The HSI Clock Is Stable */
		while( ( ( GET_BIT( MRCC->CR , 1 ) ) == 0 ) && ( LOC_u32TimeOut < 100000 ) ){ LOC_u32TimeOut++; }
 800048a:	e002      	b.n	8000492 <MRCC_VidInit+0x36>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <MRCC_VidInit+0x60>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d103      	bne.n	80004a6 <MRCC_VidInit+0x4a>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <MRCC_VidInit+0x64>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d9f2      	bls.n	800048c <MRCC_VidInit+0x30>

		SET_BIT( MRCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( MRCC->CR , 19 );
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MRCC_VidInit+0x60>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <MRCC_VidInit+0x60>)
 80004ac:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004b0:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	0001869f 	.word	0x0001869f

080004c4 <MRCC_VidEnablePeripheralClock>:

void MRCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d01c      	beq.n	8000514 <MRCC_VidEnablePeripheralClock+0x50>
 80004da:	2b02      	cmp	r3, #2
 80004dc:	dc25      	bgt.n	800052a <MRCC_VidEnablePeripheralClock+0x66>
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d002      	beq.n	80004e8 <MRCC_VidEnablePeripheralClock+0x24>
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d00b      	beq.n	80004fe <MRCC_VidEnablePeripheralClock+0x3a>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;

		}


}
 80004e6:	e020      	b.n	800052a <MRCC_VidEnablePeripheralClock+0x66>
			case AHB_BUS  : SET_BIT( MRCC->AHBENR  , Copy_u8Peripheral ); break;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	79ba      	ldrb	r2, [r7, #6]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6153      	str	r3, [r2, #20]
 80004fc:	e015      	b.n	800052a <MRCC_VidEnablePeripheralClock+0x66>
			case APB1_BUS :	SET_BIT( MRCC->APB1ENR , Copy_u8Peripheral ); break;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 800050e:	430b      	orrs	r3, r1
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	e00a      	b.n	800052a <MRCC_VidEnablePeripheralClock+0x66>
			case APB2_BUS : SET_BIT( MRCC->APB2ENR , Copy_u8Peripheral ); break;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	79ba      	ldrb	r2, [r7, #6]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a04      	ldr	r2, [pc, #16]	; (8000534 <MRCC_VidEnablePeripheralClock+0x70>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	bf00      	nop
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000

08000538 <SysTick_Handler>:
#include"SYSTICK_REG.h"
#include "SYSTICK_CONFIG.h"
void ( * MSTK_CallBack ) ( void );
/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;
void SysTick_Handler(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

	MSTK_CallBack();
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <SysTick_Handler+0x10>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4798      	blx	r3

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000024 	.word	0x20000024

0800054c <MTIMERx_GetTimerID>:
#include "TIMERx_Interface.h"
#include "TIMERx_REG.h"
#include "GPIO_INTERFACE.h"
static void(*ICU_callback)(void) = NULL ;
volatile GPTM_t* MTIMERx_GetTimerID(u8 copy_u8TimerID)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	volatile GPTM_t* timer_ptr = NULL;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]

	switch (copy_u8TimerID)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	3b02      	subs	r3, #2
 800055e:	2b03      	cmp	r3, #3
 8000560:	d817      	bhi.n	8000592 <MTIMERx_GetTimerID+0x46>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <MTIMERx_GetTimerID+0x1c>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	08000579 	.word	0x08000579
 800056c:	08000581 	.word	0x08000581
 8000570:	08000587 	.word	0x08000587
 8000574:	0800058d 	.word	0x0800058d
	{
	case TIMER2: timer_ptr = TIM2; break;
 8000578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e009      	b.n	8000594 <MTIMERx_GetTimerID+0x48>
	case TIMER3: timer_ptr = TIM3; break;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MTIMERx_GetTimerID+0x54>)
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e006      	b.n	8000594 <MTIMERx_GetTimerID+0x48>
	case TIMER4: timer_ptr = TIM4; break;
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <MTIMERx_GetTimerID+0x58>)
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	e003      	b.n	8000594 <MTIMERx_GetTimerID+0x48>
	case TIMER5: timer_ptr = TIM5; break;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MTIMERx_GetTimerID+0x5c>)
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e000      	b.n	8000594 <MTIMERx_GetTimerID+0x48>
	default: break;
 8000592:	bf00      	nop
	}
	return timer_ptr;
 8000594:	68fb      	ldr	r3, [r7, #12]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40000400 	.word	0x40000400
 80005a4:	40000800 	.word	0x40000800
 80005a8:	40000c00 	.word	0x40000c00

080005ac <MTIMERx_voidInit>:
void MTIMERx_voidInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	volatile GPTM_t *TIMER = NULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
#if TIMER_2_ENABLE == TIMER_ENABLE
	TIM2->PSC = TIMWER_2_PRESCALER;
 80005b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ba:	2201      	movs	r2, #1
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIMER_2_MAX_VALUE;
 80005be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= (TIMER_2_DIRECTION << 4);
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_CEN;
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]
#endif

#if TIMER_3_ENABLE == TIMER_ENABLE
	TIM3->PSC = TIMWER_3_PRESCALER;			// TIM3 pre-scaler
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MTIMERx_voidInit+0x70>)
 80005e6:	2202      	movs	r2, #2
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = TIMER_3_MAX_VALUE;			// TIM3 auto-reload register
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MTIMERx_voidInit+0x70>)
 80005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 |= (TIMER_3_DIRECTION << 4);  // Direction => Counter used as up-counter
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <MTIMERx_voidInit+0x70>)
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <MTIMERx_voidInit+0x70>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;				// Counter enable
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MTIMERx_voidInit+0x70>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <MTIMERx_voidInit+0x70>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6013      	str	r3, [r2, #0]
	TIM5->ARR = TIMER_5_MAX_VALUE;
	TIM5->CR1 |= (TIMER_5_DIRECTION << 4);
	TIM5->CR1 |= TIM_CR1_CEN;
#endif
	/* Enable Update Interrupt Event */
	TIMER->DIER |= TIM_DIER_UIE ;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f043 0201 	orr.w	r2, r3, #1
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60da      	str	r2, [r3, #12]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40000400 	.word	0x40000400

08000620 <MTIMERx_voidInputCaptureSetup>:
	default: break;
	}

}
void MTIMERx_voidInputCaptureSetup(u8 copy_u8TimerID, u8 copy_u8ChannelID)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	460a      	mov	r2, r1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	4613      	mov	r3, r2
 800062e:	71bb      	strb	r3, [r7, #6]
	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff8a 	bl	800054c <MTIMERx_GetTimerID>
 8000638:	60f8      	str	r0, [r7, #12]

	/* Disable timer */
	TIMER->CR1 &= ~(TIM_CR1_CEN);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 0201 	bic.w	r2, r3, #1
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]

	switch (copy_u8ChannelID)
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3b01      	subs	r3, #1
 800064a:	2b03      	cmp	r3, #3
 800064c:	d856      	bhi.n	80006fc <MTIMERx_voidInputCaptureSetup+0xdc>
 800064e:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <MTIMERx_voidInputCaptureSetup+0x34>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000665 	.word	0x08000665
 8000658:	0800068b 	.word	0x0800068b
 800065c:	080006b1 	.word	0x080006b1
 8000660:	080006d7 	.word	0x080006d7
	{
	case CH1:
		/* set timer pin input */
		TIMER->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f043 0201 	orr.w	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	619a      	str	r2, [r3, #24]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC1E;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	6a1b      	ldr	r3, [r3, #32]
 8000674:	f043 0201 	orr.w	r2, r3, #1
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC1IE;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	f043 0202 	orr.w	r2, r3, #2
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	60da      	str	r2, [r3, #12]
		break;
 8000688:	e039      	b.n	80006fe <MTIMERx_voidInputCaptureSetup+0xde>
	case CH2:
		/* set timer pin input */
		TIMER->CCMR1 |= TIM_CCMR1_CC2S_0;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	619a      	str	r2, [r3, #24]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC2E;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	f043 0210 	orr.w	r2, r3, #16
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC2IE;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	f043 0204 	orr.w	r2, r3, #4
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	60da      	str	r2, [r3, #12]
		break;
 80006ae:	e026      	b.n	80006fe <MTIMERx_voidInputCaptureSetup+0xde>
	case CH3:
		/* set timer pin input */
		TIMER->CCMR2 |= TIM_CCMR2_CC3S_0;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	f043 0201 	orr.w	r2, r3, #1
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	61da      	str	r2, [r3, #28]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC3E;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC3IE;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f043 0208 	orr.w	r2, r3, #8
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	60da      	str	r2, [r3, #12]
		break;
 80006d4:	e013      	b.n	80006fe <MTIMERx_voidInputCaptureSetup+0xde>
	case CH4:
		/* set timer pin input */
		TIMER->CCMR2 |= TIM_CCMR2_CC4S_0;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	61da      	str	r2, [r3, #28]
		/* Enable Capture*/
		TIMER->CCER |= TIM_CCER_CC4E;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	621a      	str	r2, [r3, #32]
		/* Enable Interrupt */
		TIMER->DIER |= TIM_DIER_CC4IE;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f043 0210 	orr.w	r2, r3, #16
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	60da      	str	r2, [r3, #12]
		break;
 80006fa:	e000      	b.n	80006fe <MTIMERx_voidInputCaptureSetup+0xde>
	default:
		break;
 80006fc:	bf00      	nop
	}
	/* Enable Update Interrupt Event */
	TIMER->DIER |= TIM_DIER_UIE ;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f043 0201 	orr.w	r2, r3, #1
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	60da      	str	r2, [r3, #12]
	/* Enable timer */
	TIMER->CR1 |= TIM_CR1_CEN;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop

08000720 <MTIMERx_voidGetInputCaptureCounter>:


void MTIMERx_voidGetInputCaptureCounter(u8 copy_u8TimerID, u8 copy_u8ChannelID, u32 *ptr_Counts)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	603a      	str	r2, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	460b      	mov	r3, r1
 800072e:	71bb      	strb	r3, [r7, #6]

	volatile GPTM_t *TIMER = MTIMERx_GetTimerID(copy_u8TimerID);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff0a 	bl	800054c <MTIMERx_GetTimerID>
 8000738:	60f8      	str	r0, [r7, #12]

	switch (copy_u8ChannelID)
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	3b01      	subs	r3, #1
 800073e:	2b03      	cmp	r3, #3
 8000740:	d81e      	bhi.n	8000780 <MTIMERx_voidGetInputCaptureCounter+0x60>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <MTIMERx_voidGetInputCaptureCounter+0x28>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000759 	.word	0x08000759
 800074c:	08000763 	.word	0x08000763
 8000750:	0800076d 	.word	0x0800076d
 8000754:	08000777 	.word	0x08000777
	{
	case CH1: *ptr_Counts = TIMER->CCR1; break;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e00f      	b.n	8000782 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH2: *ptr_Counts = TIMER->CCR2; break;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	e00a      	b.n	8000782 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH3: *ptr_Counts = TIMER->CCR3; break;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	e005      	b.n	8000782 <MTIMERx_voidGetInputCaptureCounter+0x62>
	case CH4: *ptr_Counts = TIMER->CCR4; break;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e000      	b.n	8000782 <MTIMERx_voidGetInputCaptureCounter+0x62>
	default: break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop

0800078c <MTIMERx_voidInputCaptureCallback>:


static timer_callback_t input_capture_callback[4][4] = { NULL };

void MTIMERx_voidInputCaptureCallback(u8 copy_u8TimerID, u8 copy_u8ChannelID, timer_callback_t ptr)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	603a      	str	r2, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	460b      	mov	r3, r1
 800079a:	71bb      	strb	r3, [r7, #6]
	if(ptr != NULL && (copy_u8TimerID < 6))
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00c      	beq.n	80007bc <MTIMERx_voidInputCaptureCallback+0x30>
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	d809      	bhi.n	80007bc <MTIMERx_voidInputCaptureCallback+0x30>
	{
		input_capture_callback[copy_u8TimerID-2][copy_u8ChannelID-1] = ptr;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	1e9a      	subs	r2, r3, #2
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4905      	ldr	r1, [pc, #20]	; (80007c8 <MTIMERx_voidInputCaptureCallback+0x3c>)
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028

080007cc <TIM2_IRQHandler>:



void TIM2_IRQHandler(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) == 0)
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10e      	bne.n	80007fc <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 80007de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e8:	f023 0302 	bic.w	r3, r3, #2
 80007ec:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <TIM2_IRQHandler+0xb8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <TIM2_IRQHandler+0xb8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) == 0) {
 80007fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10e      	bne.n	8000828 <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 800080a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000814:	f023 0304 	bic.w	r3, r3, #4
 8000818:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <TIM2_IRQHandler+0xb8>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <TIM2_IRQHandler+0xb8>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) == 0) {
 8000828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10e      	bne.n	8000854 <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 8000836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	f023 0308 	bic.w	r3, r3, #8
 8000844:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <TIM2_IRQHandler+0xb8>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <TIM2_IRQHandler+0xb8>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) == 0) {
 8000854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10e      	bne.n	8000880 <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 8000862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	f023 0310 	bic.w	r3, r3, #16
 8000870:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <TIM2_IRQHandler+0xb8>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 800087a:	4b02      	ldr	r3, [pc, #8]	; (8000884 <TIM2_IRQHandler+0xb8>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	4798      	blx	r3
		}
	}
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000028 	.word	0x20000028

08000888 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM3->SR & TIM_SR_CC1IF) == 0)
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <TIM3_IRQHandler+0xa0>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <TIM3_IRQHandler+0x2a>
	{
		// CC1IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC1IF);
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <TIM3_IRQHandler+0xa0>)
 800089a:	691b      	ldr	r3, [r3, #16]
 800089c:	4a22      	ldr	r2, [pc, #136]	; (8000928 <TIM3_IRQHandler+0xa0>)
 800089e:	f023 0302 	bic.w	r3, r3, #2
 80008a2:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][0] != NULL)
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <TIM3_IRQHandler+0x2a>
		{
			input_capture_callback[1][0]();
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM3->SR & TIM_SR_CC2IF) == 0) {
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10c      	bne.n	80008d8 <TIM3_IRQHandler+0x50>
		// CC2IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC2IF);
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008c4:	f023 0304 	bic.w	r3, r3, #4
 80008c8:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][1] != NULL) {
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d002      	beq.n	80008d8 <TIM3_IRQHandler+0x50>
			input_capture_callback[1][1]();
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM3->SR & TIM_SR_CC3IF) == 0) {
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	f003 0308 	and.w	r3, r3, #8
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d10c      	bne.n	80008fe <TIM3_IRQHandler+0x76>
		// CC3IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC3IF);
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <TIM3_IRQHandler+0xa0>)
 80008ea:	f023 0308 	bic.w	r3, r3, #8
 80008ee:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][2] != NULL) {
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <TIM3_IRQHandler+0x76>
			input_capture_callback[1][2]();
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <TIM3_IRQHandler+0xa4>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM3->SR & TIM_SR_CC4IF) == 0) {
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <TIM3_IRQHandler+0xa0>)
 8000900:	691b      	ldr	r3, [r3, #16]
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10c      	bne.n	8000924 <TIM3_IRQHandler+0x9c>
		// CC4IF bit (clear interrupt flag)
		TIM3->SR &= ~(TIM_SR_CC4IF);
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <TIM3_IRQHandler+0xa0>)
 800090c:	691b      	ldr	r3, [r3, #16]
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <TIM3_IRQHandler+0xa0>)
 8000910:	f023 0310 	bic.w	r3, r3, #16
 8000914:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[1][3] != NULL) {
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <TIM3_IRQHandler+0xa4>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <TIM3_IRQHandler+0x9c>
			input_capture_callback[1][3]();
 800091e:	4b03      	ldr	r3, [pc, #12]	; (800092c <TIM3_IRQHandler+0xa4>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4798      	blx	r3
		}
	}
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40000400 	.word	0x40000400
 800092c:	20000028 	.word	0x20000028

08000930 <USART1_IRQHandler>:

	MUSART1_CallBack = ptr ;

}

void USART1_IRQHandler(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

	MUSART1 -> SR = 0 ;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <USART1_IRQHandler+0x14>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
	MUSART1_CallBack();
 800093a:	4b03      	ldr	r3, [pc, #12]	; (8000948 <USART1_IRQHandler+0x18>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4798      	blx	r3

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013800 	.word	0x40013800
 8000948:	20000068 	.word	0x20000068

0800094c <main>:
void Delay (void);
void Timer2_ISR(void);
void Timer3_ISR(void);
u32 ptr_Counts = 1000 ;
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

	MRCC_VidInit();
 8000950:	f7ff fd84 	bl	800045c <MRCC_VidInit>
	MRCC_VidEnablePeripheralClock(APB2_BUS,GPIOA_RCC);
 8000954:	2102      	movs	r1, #2
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff fdb4 	bl	80004c4 <MRCC_VidEnablePeripheralClock>

	MRCC_VidEnablePeripheralClock(APB1_BUS,TIM2_RCC);
 800095c:	2100      	movs	r1, #0
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff fdb0 	bl	80004c4 <MRCC_VidEnablePeripheralClock>
	MRCC_VidEnablePeripheralClock(APB1_BUS,TIM3_RCC);
 8000964:	2101      	movs	r1, #1
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff fdac 	bl	80004c4 <MRCC_VidEnablePeripheralClock>

	MGPIO_VidSetPinDirection(GPIOA, PIN15, OUTPUT_SPEED_2MHZ_PP);
 800096c:	2202      	movs	r2, #2
 800096e:	210f      	movs	r1, #15
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fc0f 	bl	8000194 <MGPIO_VidSetPinDirection>
	MGPIO_VidSetPinDirection(GPIOA, PIN1, OUTPUT_SPEED_2MHZ_PP);
 8000976:	2202      	movs	r2, #2
 8000978:	2101      	movs	r1, #1
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fc0a 	bl	8000194 <MGPIO_VidSetPinDirection>
	MNVIC_VidEnablePeripheral(TIME2);
 8000980:	201c      	movs	r0, #28
 8000982:	f7ff fd53 	bl	800042c <MNVIC_VidEnablePeripheral>
	MNVIC_VidEnablePeripheral(TIME3);
 8000986:	201d      	movs	r0, #29
 8000988:	f7ff fd50 	bl	800042c <MNVIC_VidEnablePeripheral>


	MTIMERx_voidInit();
 800098c:	f7ff fe0e 	bl	80005ac <MTIMERx_voidInit>

	MTIMERx_voidInputCaptureSetup(TIMER2, CH1);
 8000990:	2101      	movs	r1, #1
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fe44 	bl	8000620 <MTIMERx_voidInputCaptureSetup>
	MTIMERx_voidGetInputCaptureCounter(TIMER2, CH1, &ptr_Counts);
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0x80>)
 800099a:	2101      	movs	r1, #1
 800099c:	2002      	movs	r0, #2
 800099e:	f7ff febf 	bl	8000720 <MTIMERx_voidGetInputCaptureCounter>
	MTIMERx_voidInputCaptureCallback(TIMER2, CH1, Timer2_ISR);
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <main+0x84>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff fef0 	bl	800078c <MTIMERx_voidInputCaptureCallback>
	MTIMERx_voidInputCaptureSetup(TIMER3, CH2);
 80009ac:	2102      	movs	r1, #2
 80009ae:	2003      	movs	r0, #3
 80009b0:	f7ff fe36 	bl	8000620 <MTIMERx_voidInputCaptureSetup>
	MTIMERx_voidGetInputCaptureCounter(TIMER3, CH2, &ptr_Counts);
 80009b4:	4a05      	ldr	r2, [pc, #20]	; (80009cc <main+0x80>)
 80009b6:	2102      	movs	r1, #2
 80009b8:	2003      	movs	r0, #3
 80009ba:	f7ff feb1 	bl	8000720 <MTIMERx_voidGetInputCaptureCounter>
	MTIMERx_voidInputCaptureCallback(TIMER3, CH2, Timer3_ISR);
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <main+0x88>)
 80009c0:	2102      	movs	r1, #2
 80009c2:	2003      	movs	r0, #3
 80009c4:	f7ff fee2 	bl	800078c <MTIMERx_voidInputCaptureCallback>

	while(1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x7c>
 80009ca:	bf00      	nop
 80009cc:	20000000 	.word	0x20000000
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a29 	.word	0x08000a29

080009d8 <Delay>:

	}
}

void Delay (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
	for(u32 x = 0; x < 500000 ; x++)
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e003      	b.n	80009ec <Delay+0x14>
	{
		asm("NOP");
 80009e4:	bf00      	nop
	for(u32 x = 0; x < 500000 ; x++)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3301      	adds	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <Delay+0x28>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d9f7      	bls.n	80009e4 <Delay+0xc>
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	0007a11f 	.word	0x0007a11f

08000a04 <Timer2_ISR>:
void Timer2_ISR(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN1, HIGH);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fc93 	bl	8000338 <MGPIO_VidSetPinValue>
	Delay();
 8000a12:	f7ff ffe1 	bl	80009d8 <Delay>
	MGPIO_VidSetPinValue(GPIOA, PIN1, LOW);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fc8c 	bl	8000338 <MGPIO_VidSetPinValue>
	Delay();
 8000a20:	f7ff ffda 	bl	80009d8 <Delay>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Timer3_ISR>:

void Timer3_ISR(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	MGPIO_VidSetPinValue(GPIOA, PIN15, HIGH);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	210f      	movs	r1, #15
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff fc81 	bl	8000338 <MGPIO_VidSetPinValue>
	Delay();
 8000a36:	f7ff ffcf 	bl	80009d8 <Delay>
	MGPIO_VidSetPinValue(GPIOA, PIN15, LOW);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fc7a 	bl	8000338 <MGPIO_VidSetPinValue>
	Delay();
 8000a44:	f7ff ffc8 	bl	80009d8 <Delay>

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f000 f811 	bl	8000aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff ff65 	bl	800094c <main>

08000a82 <LoopForever>:

LoopForever:
  b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a90:	08000b08 	.word	0x08000b08
  ldr r2, =_sbss
 8000a94:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a98:	2000006c 	.word	0x2000006c

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <__libc_init_array>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	2600      	movs	r6, #0
 8000aa4:	4d0c      	ldr	r5, [pc, #48]	; (8000ad8 <__libc_init_array+0x38>)
 8000aa6:	4c0d      	ldr	r4, [pc, #52]	; (8000adc <__libc_init_array+0x3c>)
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	42a6      	cmp	r6, r4
 8000aae:	d109      	bne.n	8000ac4 <__libc_init_array+0x24>
 8000ab0:	f000 f81a 	bl	8000ae8 <_init>
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	4d0a      	ldr	r5, [pc, #40]	; (8000ae0 <__libc_init_array+0x40>)
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <__libc_init_array+0x44>)
 8000aba:	1b64      	subs	r4, r4, r5
 8000abc:	10a4      	asrs	r4, r4, #2
 8000abe:	42a6      	cmp	r6, r4
 8000ac0:	d105      	bne.n	8000ace <__libc_init_array+0x2e>
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac8:	4798      	blx	r3
 8000aca:	3601      	adds	r6, #1
 8000acc:	e7ee      	b.n	8000aac <__libc_init_array+0xc>
 8000ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad2:	4798      	blx	r3
 8000ad4:	3601      	adds	r6, #1
 8000ad6:	e7f2      	b.n	8000abe <__libc_init_array+0x1e>
 8000ad8:	08000b00 	.word	0x08000b00
 8000adc:	08000b00 	.word	0x08000b00
 8000ae0:	08000b00 	.word	0x08000b00
 8000ae4:	08000b04 	.word	0x08000b04

08000ae8 <_init>:
 8000ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aea:	bf00      	nop
 8000aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	469e      	mov	lr, r3
 8000af2:	4770      	bx	lr

08000af4 <_fini>:
 8000af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af6:	bf00      	nop
 8000af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afa:	bc08      	pop	{r3}
 8000afc:	469e      	mov	lr, r3
 8000afe:	4770      	bx	lr
